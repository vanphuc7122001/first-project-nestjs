//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model CartItem {
    userId String @db.VarChar(36) @map("user_id")
    productId String @db.VarChar(36) @map("product_id")
    quantity Int

    user User @relation(fields: [userId], references:[id])
    product Product @relation(fields: [productId], references:[id])
    @@id([userId, productId])
    @@map("cart-items")
}

model Category {
    id       String              @id @default(uuid()) @db.VarChar(36)
    name     String              @db.VarChar(255)
    parentId String?             @map("parent_id") @db.VarChar(36)
    parent   Category?           @relation("CategoryToCategory", fields: [parentId], references: [id])
    children Category[]          @relation("CategoryToCategory")
    products ProductOnCategory[]

    level     Int       @default(0)
    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)

    @@map("categories")
}


model OrderDetail {
    orderId   String @map("order_id") @db.VarChar(36)
    productId String @map("product_id") @db.VarChar(36)

    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    productName     String @map("product_name") @db.VarChar(255)
    productPrice    Float  @map("product_price")
    productQuantity Float  @map("product_quantity")

    @@id([orderId, productId])
    @@map("order_details")
}


model Order {
    id String @id @default(uuid()) @db.VarChar(36)

    user            User    @relation(fields: [userId], references: [id])
    userId          String  @map("user_id") @db.VarChar(36)
    paymentMethod   String  @map("payment_method") @db.VarChar(100)
    shippingAddress String  @map("shipping_address") @db.VarChar(255)
    shippingMethod  String  @map("shipping_method") @db.VarChar(100)
    phone           String  @db.VarChar(10)
    status          String  @db.VarChar(30)
    totalBefore     Float   @map("total_before")
    totalAfter      Float   @map("totla_after")
    note            String? @db.VarChar(255)

    orderDetails   OrderDetail[]
    trackingOrders TrackingOrder[]

    @@map("orders")
}


model ProductOnCategory {
    categoryId String @map("category_id") @db.VarChar(36)
    productId  String @map("product_id") @db.VarChar(36)

    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([categoryId, productId])
    @@map("products_on_catetories")
}


model Product {
    id String @id @default(uuid()) @db.VarChar(36)

    name        String  @db.VarChar(255)
    description String? @db.Text
    price       Float
    image       String  @db.VarChar(255)
    quantity    Int
    isPublished Boolean @default(false) @map("is_publish")
    sold        Int     @default(0) // cấm admin cập nhật

    cartItems    CartItem[]
    orderDetails OrderDetail[]
    categories   ProductOnCategory[]
    createdAt    DateTime            @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt    DateTime?           @updatedAt @map("updated_at") @db.Timestamptz(3)
    deletedAt    DateTime?           @map("deleted_at") @db.Timestamptz(3)

    @@map("products")
}


model Seed {
  id        String   @id @default(uuid()) @db.VarChar(36)
  key       String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("seeds")
}


model TrackingOrder {
    // TODO có nên bỏ user id không
    userId String @db.VarChar(36) @map("user_id")
    orderId String @db.VarChar(36) @map("order_id")
    user User  @relation( fields: [userId], references: [id])
    order Order  @relation( fields: [orderId], references: [id])

    status String @db.VarChar(20) // status : chờ xác nhận if( status === xác nhận) {hủy nếu muốn} => xác nhận => đang giao hàng => đã nhận hàng 
    // <=> tùy tâm trạng admin sản phẩm có thể lổi
    updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(3)

    @@id([orderId, status])

    @@map("tracking_orders")
}

model User {
  id                  String    @id @default(uuid()) @db.VarChar(36)
  email               String    @db.VarChar(255)
  password            String    @db.VarChar(255)
  firstName           String    @map("first_name") @db.VarChar(255)
  lastName            String?   @map("last_name") @db.VarChar(255)
  adminStatus         String    @map("admin_status") @db.VarChar(255)
  userStatus          String    @map("user_status") @db.VarChar(255)
  salerStatus         String    @map("saler_status") @db.VarChar(255)
  isAdmin             Boolean   @default(false) @map("is_admin") @db.Boolean
  isUser              Boolean   @default(false) @map("is_user") @db.Boolean
  isSaler             Boolean   @default(false) @map("is_saler") @db.Boolean
  forgetPasswordToken String    @default("") @map("forget_password_token") @db.Text
  verifyEmailToken    String    @default("") @map("email_verify_token") @db.Text
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt           DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt           DateTime? @map("deleted_at") @db.Timestamptz(3)

  // relationship
  cartItem CartItem[] 
  orders Order[]
  trackingOrders TrackingOrder[]



  @@map("users")
}
